#!/usr/bin/python

from ansible.module_utils.basic import AnsibleModule
import subprocess

def run_module():
    module_args = dict(
        ports=dict(type='list', required=True),
        state=dict(type='str', required=False, default='opened', choices=['opened', 'closed']),
        permanent=dict(type='bool', required=False, default=True)
    )

    result = dict(
        changed=False,
        original_message='',
        message=''
    )

    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True
    )

    ports = module.params['ports']
    state = module.params['state']
    permanent = module.params['permanent']
    zone = 'EXTRA_PORTS'

    if module.check_mode:
        module.exit_json(**result)

    # Ensure the EXTRA_PORTS zone exists
    try:
        zone_exists = subprocess.run(['firewall-cmd', '--permanent', '--get-zones'], check=True, capture_output=True, text=True)
        if zone not in zone_exists.stdout:
            subprocess.run(['firewall-cmd', '--permanent', '--new-zone={}'.format(zone)], check=True)
            result['changed'] = True
            result['message'] += f"Zone {zone} created.\n"
            subprocess.run(['firewall-cmd', '--reload'], check=True)
    except subprocess.CalledProcessError as e:
        module.fail_json(msg=f"Failed to check or create zone {zone}: {str(e)}", **result)

    for port in ports:
        cmd = ['firewall-cmd', '--zone={}'.format(zone), '--add-port={}/tcp'.format(port)]
        if permanent:
            cmd.append('--permanent')
        if state == 'closed':
            cmd[2] = cmd[2].replace('--add', '--remove')

        try:
            subprocess.run(cmd, check=True)
            result['changed'] = True
            result['message'] += f"Port {port} has been {state} in zone {zone}.\n"
        except subprocess.CalledProcessError as e:
            module.fail_json(msg=f"Failed to change state of port {port}: {str(e)}", **result)

    module.exit_json(**result)

def main():
    run_module()

if __name__ == '__main__':
    main()
